//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */

 @SuppressWarnings({ "unused", "unchecked","rawtypes" })
public class Test<R, A> implements GJVisitor<R, A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   String ans = ""; 
   boolean flag1 = false;
   Map<String,String> var = new HashMap<>();
   int count = 0;
   Vector<Integer> lineNo = new Vector<>();
   int ctr = 0;
   public Map<String, Map<Integer, Vector<String>>> Graph = new HashMap<>();
   public Map<String, Map<String, Vector<String>>> Function_info = new HashMap<>();
   public Map<String, Map<String, Map<String, Vector<String>>>> Method_var = new HashMap<>();
   public Map<String, Map<String, Vector<String>>> Field_var = new HashMap<>();
   Set<String> CycleElement = new LinkedHashSet<>();
   public Map<String, String> InfoInline = new HashMap<>();
   public Map<String, Map<String,String>> InfoVariable = new HashMap<>();
   public Map<String, String> InfoReturn = new HashMap<>();
   String MethodName = "";
   String ClassName = "";
   boolean evalute = false;
   Vector<String> argList = new Vector<>();

   public R visit(NodeList n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if (n.present()) {
         R _ret = null;
         int _count = 0;
         for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
            e.nextElement().accept(this, argu);
            _count++;
         }
         return _ret;
      } else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if (n.present())
         return n.node.accept(this, argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret = null;
      int _count = 0;
      for (Enumeration<Node> e = n.elements(); e.hasMoreElements();) {
         e.nextElement().accept(this, argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) {
      return null;
   }

   //
   // User-generated visitor methods below
   //

   /**
   * f0 -> MainClass()
   * f1 -> ( TypeDeclaration() )*
   * f2 -> <EOF>
   */
    
   private void dfs(Goal n ,A argu,String node,Map<String,Boolean> Visited)
   {
        Visited.put(node, true);
        if(Graph.containsKey(node))
        {
            for (Integer key : Graph.get(node).keySet()) {
                for (int i = 0; i < Graph.get(node).get(key).size(); ++i) {
                    if (Visited.containsKey(Graph.get(node).get(key).get(i)) == false) {
                        dfs(n, argu, Graph.get(node).get(key).get(i), Visited);
                    }
                }
            }
        }
        
        String x[] = node.split("@");
        ClassName = x[0];
        MethodName = x[1];
        ans = "";
        var.clear();

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      InfoInline.put(node, ans);
      Map<String, String> dummy = new HashMap<>(var);
      InfoVariable.put(node, dummy);
        
      //System.out.println(node);
   }

   

   public R visit(Goal n, A argu) {
      R _ret = null;
     
      CallGraph cg = (CallGraph) (argu);
      Method_var = cg.Method_var;
      Graph = cg.Graph;
      Function_info = cg.Function_info;
      CycleElement = cg.CycleElement;
      Field_var = cg.Field_var;

      for (String key : Graph.keySet())
      {
          if (InfoInline.containsKey(key) == false) {
              Map<String, Boolean> Visited = new HashMap<>();
              //Map<String,Boolean> PathVisited =  new HashMap<>();
              dfs(n, argu, key, Visited);
          }
      }
      
      // for (String key : InfoInline.keySet())
      //   {
      //       System.out.println(key);
      //       System.out.println(InfoInline.get(key));
      //   }

      //   for (String key : InfoVariable.keySet())
      //   {
      //       System.out.println(key);
      //       System.out.println(InfoVariable.get(key));
      //   }

      //   for (String key : InfoReturn.keySet())
      //   {
      //       System.out.print(key+" -> ");
      //       System.out.println(InfoReturn.get(key));
      //   }

        
   
   
   
       
     return _ret;
   }
  

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */

    
   public R visit(MainClass n, A argu) {
       R _ret = null;
       String s = n.f1.f0.toString();
       if (ClassName.equals(s))
       {
           ctr = 0;
           count++;
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            n.f12.accept(this, argu);
            n.f13.accept(this, argu);
            n.f14.accept(this, argu);

            for (String key : Method_var.get(ClassName).get(MethodName).keySet())
            {
               var.put(Method_var.get(ClassName).get(MethodName).get(key).get(1),
                     Method_var.get(ClassName).get(MethodName).get(key).get(0));
            }
            ans += "{\n";
            n.f15.accept(this, argu);
            ans += "}\n";
            n.f16.accept(this, argu);
            n.f17.accept(this, argu);
       }
      
      
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
       R _ret = null;
       String s = n.f1.f0.toString();

       if(ClassName.equals(s))
       {
            n.f0.accept(this, argu);
            n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            //n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
       }
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
       R _ret = null;
       String s = n.f1.f0.toString();
       if (ClassName.equals(s))
        {
                n.f0.accept(this, argu);
                n.f1.accept(this, argu);
                n.f2.accept(this, argu);
                n.f3.accept(this, argu);
                n.f4.accept(this, argu);
                //n.f5.accept(this, argu);
                n.f6.accept(this, argu);
                n.f7.accept(this, argu);
        }
      
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null,r1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s = n.f1.f0.toString();
      //System.out.println(s);

      /*String type = Method_var.get(ClassName).get(MethodName).get(s).get(0);
      String identifier = Method_var.get(ClassName).get(MethodName).get(s).get(1);
      var.put(identifier, type);
      */
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
       R _ret = null,r1;
       String s = n.f2.f0.toString();
       if (MethodName.equals(s))
       {
           ctr = 0;
           count++;
            n.f0.accept(this, argu);
            r1 = n.f1.accept(this, argu);
            n.f2.accept(this, argu);
            n.f3.accept(this, argu);
            n.f4.accept(this, argu);
            n.f5.accept(this, argu);
            n.f6.accept(this, argu);
            n.f7.accept(this, argu);
            for (String key : Method_var.get(ClassName).get(MethodName).keySet())
            {
               if(Method_var.get(ClassName).get(MethodName).get(key).size()<=2)
                  var.put(Method_var.get(ClassName).get(MethodName).get(key).get(1),
                     Method_var.get(ClassName).get(MethodName).get(key).get(0));
            }



            // for (String key : Field_var.get(ClassName).keySet())
            // {
            //     var.put(Field_var.get(ClassName).get(key).get(1), Field_var.get(ClassName).get(key).get(0));
            // }
            //var.put("this" + ClassName, ClassName);

            ans += "{\n";
            // for (String key : Field_var.get(ClassName).keySet())
            // {
            //     ans += "    " + Field_var.get(ClassName).get(key).get(1) + " = " + "@this." +key+ " ;\n";
            // }
            
            n.f8.accept(this, argu);
            n.f9.accept(this, argu);
            n.f10.accept(this, argu);
            n.f11.accept(this, argu);
            n.f12.accept(this, argu);
            String sd;
            //System.out.println(n.f10.f0.toString());
            if(Method_var.get(ClassName).get(MethodName).containsKey(n.f10.f0.toString()))
               sd = Method_var.get(ClassName).get(MethodName).get(n.f10.f0.toString()).get(1);
            else
               sd = Field_var.get(ClassName).get(n.f10.f0.toString()).get(1);
            
            //String sdt = Method_var.get(ClassName).get(MethodName).get("this"+ClassName).get(1);
            

            ans += "    Sasuka_uchiha" + Integer.toString(count) + " = " + sd + " ;\n";
            
            var.put("Sasuka_uchiha" + Integer.toString(count), r1.toString());
            // var.put("this" + ClassName, ClassName);
            // for (String key : Field_var.get(ClassName).keySet())
            // {
            //     var.put(Field_var.get(ClassName).get(key).get(1), Field_var.get(ClassName).get(key).get(0));
            // }
            //var.put(sdt, ClassName);
           

            InfoReturn.put(ClassName + "@" + MethodName, "Sasuka_uchiha" + Integer.toString(count));
            ans += "}\n";
       }
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      if (n.f0.which == 3)
      {
          String identifierName = ((Identifier) n.f0.choice).f0.toString();
          _ret = (R) (identifierName);
      }
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R) ("int[]");
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) ("boolean");
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    *       | MessageSendStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
       R _ret = null;
      ans += "{\n";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      ans += "}\n";
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> RhsExpression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
        ctr++;
      R _ret = null;
      R r1, r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //System.out.println(ClassName);
      ans += "    " + r1.toString() + " = " + r2.toString() + " ;\n";
      
      // String s = n.f0.f0.toString();
      // if (Field_var.get(ClassName).containsKey(s))
      // {
      //    for (String key : Field_var.get(ClassName).keySet())
      //    {
      //          ans += "    " +"@this." +key+" = "+Field_var.get(ClassName).get(key).get(1)+" ;\n";
      //    }
      // }
      return _ret;
   }

   /**
    * f0 -> DotExpression()
    *       | Expression()
    */
   public R visit(RhsExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
       ctr++;
      R _ret = null;
      R r1, r2, r3;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      r3 = n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      ans += "    " + r1.toString() + "[" + r2.toString() + "] = " + r3.toString() + " ;\n";
      // String s = n.f0.f0.toString();
      // if (Field_var.get(ClassName).containsKey(s))
      // {
      //    for (String key : Field_var.get(ClassName).keySet())
      //    {
      //          ans += "    " +"@this." +key+" = "+Field_var.get(ClassName).get(key).get(1)+" ;\n";
      //    }
      // }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      ctr++;
      R _ret = null;
      R r1, r2, r3;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      r3 = n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      ans += "    " + r1.toString() + "." + n.f2.f0.toString() + " = " + r3.toString() + " ;\n";
      // String s = n.f0.f0.toString();
      // if (Field_var.get(ClassName).containsKey(s))
      // {
      //    for (String key : Field_var.get(ClassName).keySet())
      //    {
      //          ans += "    " +"@this." +key+" = "+Field_var.get(ClassName).get(key).get(1)+" ;\n";
      //    }
      // }
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      ctr++;
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      ans += "    "+"if(" + _ret.toString() + ")\n{\n";
      n.f4.accept(this, argu);
      ans += "}\n";
      ans += "    " + "else\n{\n";
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      ans += "}\n";
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret = null;
      ctr++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      ans += "    "+"while(" + _ret.toString() + ")\n{\n";
      n.f4.accept(this, argu);
      ans += "}\n";
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) {
      R _ret = null;
      ctr++;
      R r1, r2, r3, r4, r5;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r1 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      r2 = n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      r3 = n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      r4 = n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      r5 = n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      ans +="    "+ "for(" + r1.toString() + "=" + r2.toString() + ";" + r3.toString() + ";" + r4.toString() + "="
            + r5.toString() + ")\n{\n";
      n.f12.accept(this, argu);
      ans += "}\n";
      // String s = n.f8.f0.toString();
      // if (Field_var.get(ClassName).containsKey(s))
      // {
      //    for (String key : Field_var.get(ClassName).keySet())
      //    {
      //          ans += "    " +"@this." +key+" = "+Field_var.get(ClassName).get(key).get(1)+" ;\n";
      //    }
      // }
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret = null;
      ctr++;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      ans += "    "+"System.out.println(" + _ret.toString() + ") ;\n";
      return _ret;
   }


   /**
    * f0 -> ( InlineAnn() )?
    * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
    */
   public R visit(MessageSendStatement n, A argu) {
       R _ret = null;
       ctr++;
       flag1 = false;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      evalute = false;
      
      // for (String key : Field_var.get(ClassName).keySet())
      // {
      //       ans += "    " + Field_var.get(ClassName).get(key).get(1) + " = " + "@this." +key+ " ;\n";
      // }
      return _ret;
   }

   /**
    * f0 -> MessageSend()
    * f1 -> ";"
    */
   public R visit(VoidMessageSendStmt n, A argu) {
      R _ret = null;
   
      _ret = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      if (flag1)
      {
         ans +="    "+ _ret.toString() + " ;\n";
      }

      

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> MessageSend()
    * f3 -> ";"
    */
   public R visit(RetMessageSendStmt n, A argu) {
      R _ret = null;
      R r1, r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      ans += "    "+r1.toString() + "=" + r2.toString() + " ;\n";
      return _ret;
   }

   /**logFile
    * f0 -> <SCOMMENT1>
    * f1 -> <INLINE>
    * f2 -> <SCOMMENT2>
    */
   public R visit(InlineAnn n, A argu) {
      R _ret = null;
      evalute = true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret = null;
      R r1, r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      String s = r1.toString() + "&" + r2.toString();
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret = null;
      R r1, r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      String s = r1.toString() + "<" + r2.toString();
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret = null;
      R r1, r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      String s = r1.toString() + "+" + r2.toString();
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret = null;
      R r1, r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      String s = r1.toString() + "-" + r2.toString();
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret = null;
      R r1, r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      String s = r1.toString() + "*" + r2.toString();
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null,r1,r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      String s = r1.toString() + "[" + r2.toString() + "]";
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null,r1;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String s = r1.toString() + ".length";
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
       R _ret = null, r1, r2;
       String s = "";
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      

      s += r1.toString() + "." + n.f2.f0.toString() + "(";

      for (int i = 0; i < argList.size() - 1; ++i) 
      {
          String temArg = argList.get(i);
        s += temArg + ",";
      }
      if (argList.size() >= 1)
      {
          String temArg = argList.get(argList.size()-1);
          s += temArg;
      }

      s += ")";

      String node = ClassName + "@" + MethodName;
      Vector<String> dummy = Graph.get(node).get(ctr);
      //System.out.println(node+ " "+ctr);

      if(evalute)
      {
         Boolean flag = true;
         if (dummy.size() > 1) {
            flag = false;
         } else if (CycleElement.contains(dummy.get(0))) {
            flag = false;
         }

         if (flag) {
            String[] x = dummy.get(0).split("@");
            Vector<String> y = Function_info.get(x[0]).get(x[1]);

            for (int i = 1; i < y.size(); ++i) {
               String temp = Method_var.get(x[0]).get(x[1]).get(y.get(i)).get(1);
               String val = Method_var.get(x[0]).get(x[1]).get(y.get(i)).get(0);
               String temArg = argList.get(i-1);
               ans += "    " + temp + " = " + temArg + " ;\n";
               var.put(temp, val);

            }

            //ans += "    this" + x[0] + " = " + "new " + x[0] + "() ;\n";
            // for (String key : Field_var.get(x[0]).keySet())
            // {
            //    ans += "    " + Field_var.get(x[0]).get(key).get(1) + " = " + "this" + x[0] + "." + key + " ;\n";logFile
            // }
            String str = InfoInline.get(dummy.get(0));
            //System.out.println(r1.toString());
            if(r1.toString().indexOf("new")!=-1 )
            {
               ans += "    "+Method_var.get(ClassName).get(MethodName).get(r1.toString()).get(1) + " = " + r1.toString()+ " ;\n";
               str = str.replaceAll("_this", Method_var.get(ClassName).get(MethodName).get(r1.toString()).get(1) );
               //str = str.replaceAll("@this", Method_var.get(ClassName).get(MethodName).get(r1.toString()).get(1) );
            }
            else if (r1.toString().equals("_this") == false)
            {
               str = str.replaceAll("_this", r1.toString());
               //str = str.replaceAll("@this", r1.toString());
            }
            
            
            ans += str;

            //var.put("this" + x[0], x[0]);
            Map<String, String> d = InfoVariable.get(dummy.get(0));
            for (String key : d.keySet()) {
               var.put(key, InfoVariable.get(dummy.get(0)).get(key));
            }

            _ret = (R) (InfoReturn.get(dummy.get(0)));

         } else {
            flag1 = true;
            _ret = (R) (s);
         }

      }
      else
      {
         flag1 = true;
         _ret = (R)(s);
      }
      
      
      



      argList.clear();
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String s = n.f0.f0.toString();
      if (Method_var.get(ClassName).get(MethodName).containsKey(s))
      {
          argList.add(Method_var.get(ClassName).get(MethodName).get(s).get(1));
      }
      else
      {
        argList.add(Field_var.get(ClassName).get(s).get(1));
      }
      n.f1.accept(this, argu);
      
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String s = n.f1.f0.toString();
      if (Method_var.get(ClassName).get(MethodName).containsKey(s))
      {
          argList.add(Method_var.get(ClassName).get(MethodName).get(s).get(1));
      }
      else
      {
        argList.add(Field_var.get(ClassName).get(s).get(1));
      }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) (n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) (n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) (n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      String s = n.f0.toString();
      //System.out.println(ClassName+" "+MethodName+" "+s);

      Map<String, Vector<String>> x = Method_var.get(ClassName).get(MethodName);
      if (x.containsKey(s)) {
         _ret = (R) (x.get(s).get(1));
      } else {
         _ret = (R) (s);
      }
      
      /*
       else if(Field_var.get(ClassName).containsKey(s))
      {
          _ret = (R) (Field_var.get(ClassName).get(s).get(1));
      }
       */
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      _ret = (R) ("_this");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null,r1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      r1 = n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String s = "new int [" + r1.toString() + "]";
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String s = "new " + n.f1.f0.toString() + "()";
      _ret = (R) (s); 
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = n.f1.accept(this, argu);
      String s = "!" + _ret.toString();
      _ret = (R) (s);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(DotExpression n, A argu) {
      R _ret=null,r1,r2;
      r1 = n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      r2 = n.f2.accept(this, argu);
      String s = r1.toString() + "." + n.f2.f0.toString();
      _ret = (R) (s);
      return _ret;
   }

}
