//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;


@SuppressWarnings({"unused","unchecked"})

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Information<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   int ctr = 0;
   
   // Map<String, Map<String, Map<String,String>>> Variable_info = new HashMap<>();
   // Map<String, Map<String, String>> Function_info = new HashMap<>();
   // Map<String, Map<String, Vector<String>>> Return_info = new HashMap<>();
   // Map<String, Map<String, Vector<String>>> Parameter_info = new HashMap<>();
   public Map<String, Vector<String>> Parent_info = new HashMap<>();
   public Map<String, Vector<String>> Child_info = new HashMap<>();
   public Map<String, Map<String, Vector<String>>> Field_var = new HashMap<>();
   public Map<String, Map<String, Map<String, Vector<String>>>> Method_var = new HashMap<>();
   public Map<String, Map<String, Vector<String>>> Function_info = new HashMap<>();
   Vector<String> params=new Vector<>();

   boolean create = false;
   String ClassName = "";
   String MethodName = "";


   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */

    public void Field_Bfs(String ClassNode)
   {
      
      Queue<String> q = new LinkedList<>();
      q.add(ClassNode);
      Map<String, Vector<String>> ClassMap = Field_var.get(ClassNode);
      while(!q.isEmpty())
      {
         String x = q.peek();
         q.remove();
         Map<String, Vector<String>> dummy = Field_var.get(x);

         for(String key:dummy.keySet())
         {
            if (ClassMap.containsKey(key) == false) {
               Vector<String> y = new Vector<>();
               y.add(dummy.get(key).get(0));
               ctr++;
               y.add("Itachi_uchiha"+Integer.toString(ctr));
               ClassMap.put(key, y);
            }
         }
         
         for (int i = 0; i < Child_info.get(x).size(); ++i) {
            q.add(Child_info.get(x).get(i));
         }
      }
   }

   public R visit(Goal n, A argu) {
      R _ret = null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      // System.out.println("Parent info");
      // for (String key : Parent_info.keySet())
      // {
      //    System.out.print(key + " -> ");
      //    for(int i=0;i<Parent_info.get(key).size();++i)
      //    {
      //       System.out.print(Parent_info.get(key).get(i) + " ");
      //    }
      //    System.out.println();
      // }
      // System.out.println("\nChild info");
      // for (String key : Child_info.keySet())
      // {
      //    System.out.print(key + " -> ");
      //    for(int i=0;i<Child_info.get(key).size();++i)
      //    {
      //       System.out.print(Child_info.get(key).get(i) + " ");
      //    }
      //    System.out.println();
      // }

      for (String k : Field_var.keySet())
      {
         Field_Bfs(k);
      }
      // System.out.println("\nMethod Variable Information");
      // for (String k1 : Method_var.keySet()) {
      //    for (String k2 : Method_var.get(k1).keySet()) {
      //       for (String k3 : Method_var.get(k1).get(k2).keySet()) {
      //          System.out.println(k1 + " " + k2 + " " + k3 + " " + Method_var.get(k1).get(k2).get(k3));
      //       }
      //    }
      // }
      // System.out.println("\nField Variable information");
      // for (String k1 : Field_var.keySet()) {
      //    //System.out.println(k1);
      //    for (String k2 : Field_var.get(k1).keySet()) {
      //       System.out.println(k1 + " " + k2 + " " + Field_var.get(k1).get(k2));
      //    }
      // }

      // System.out.println("\nFunction Information");
      // for(String key: Function_info.keySet())
      // {

      //    for(String k1:Function_info.get(key).keySet())
      //    {
      //       System.out.println(key+" "+k1+" "+Function_info.get(key).get(k1));

      //    }
      // }

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret = null;
      String n1;
      n1 = n.f1.f0.toString();
      ClassName = n1;
      MethodName = "main";
      Method_var.put(ClassName, new HashMap<>());
      Map<String, Map<String, Vector<String>>> dummy = Method_var.get(ClassName);
      dummy.put(MethodName, new HashMap<>());

      Vector<String> v1 = new Vector<>();
      Parent_info.put(n1, v1);

      Vector<String> v2 = new Vector<>();
      Child_info.put(n1, v2);

      Field_var.put(ClassName, new HashMap<>());

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret = null;

      // Creating adjacency list for parent information
      String n1 = n.f1.f0.toString();

      Vector<String> v1 = new Vector<>();
      Parent_info.put(n1, v1);

      Vector<String> v2 = new Vector<>();
      Child_info.put(n1, v2);



      ClassName = n1;
      MethodName = "";
      Field_var.put(ClassName, new HashMap<>());
      Method_var.put(ClassName, new HashMap<>());
      Function_info.put(ClassName,new HashMap<>());



      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret = null;
      String n1, n2;
      n1 = n.f1.f0.toString();
      n2 = n.f3.f0.toString();

      Vector<String> v1, v2 ,v3;
      // Creating adjacency list for child information

      if(Child_info.containsKey(n1)==false)
      {
         v1 = new Vector<>();
         Child_info.put(n1, v1);
      }

      if(Parent_info.containsKey(n1)==false)
      {
         v2 = new Vector<>();
         Parent_info.put(n1, v2);
      }

      if (Parent_info.containsKey(n2) == false)
      {
         v3 = new Vector<>();
         Parent_info.put(n2, v3);
      }

      v1 = Parent_info.get(n2);
      v1.add(n1);

      v2 = Child_info.get(n1);
      v2.add(n2);

      



      

      ClassName = n1;
      MethodName = "";
      Field_var.put(ClassName, new HashMap<>());
      Method_var.put(ClassName, new HashMap<>());
      Function_info.put(ClassName, new HashMap<>());



      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret = null;
      R n1, n2;
      n1 = n.f0.accept(this, argu);
      n2 = n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      if(MethodName=="")
      {
         Map<String, Vector<String>> dummy = Field_var.get(ClassName);
         Vector<String> d = new Vector<>();
         d.add(n1.toString());
         ctr++;
         d.add("Itachi_uchiha"+Integer.toString(ctr));
         dummy.put(n2.toString(),d);
      }
      else
      {
         Map<String, Vector<String>> dummy = Method_var.get(ClassName).get(MethodName);
         Vector<String> x = new Vector<>();
         ctr++;
         x.add(n1.toString());
         x.add("Itachi_uchiha"+Integer.toString(ctr));
         
         dummy.put(n2.toString(),x);
      }
      
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> (ParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret = null,r1;
      String n1;
      n1 = n.f2.f0.toString();
      MethodName = n1;
      Map<String, Map<String, Vector<String>>> dummy = Method_var.get(ClassName);
      dummy.put(MethodName, new HashMap<>());
      Map<String, Vector<String>> x = Method_var.get(ClassName).get(MethodName);
      // Vector<String> y =new Vector<>();
      // y.add(ClassName);
      // ctr++;
      // y.add("tempVar"+Integer.toString(ctr));
      // x.put("this"+ClassName, y);
      //System.out.println(MethodName);
      n.f0.accept(this, argu);
      r1 = n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Map<String, Vector<String>> dummy2 = Function_info.get(ClassName);
      Vector<String> dummy3 = new Vector<>();
      dummy3.add(r1.toString());
      dummy2.put(MethodName,dummy3);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret = null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      Map<String, Vector<String>> x = Method_var.get(ClassName).get(MethodName);
      Vector<String> dummy2 = Function_info.get(ClassName).get(MethodName);
      
      
      for (int i = 0; i < params.size(); i+=2)
      {
         Vector<String> y = new Vector<>();
         y.add(params.get(i));
         ctr++;
         y.add("Itachi_uchiha" + Integer.toString(ctr));
         y.add("formal");
         dummy2.add(params.get(i + 1));
         x.put(params.get(i+1),y);
         
      }
      params.clear();
      
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret = null;
      
      _ret = n.f0.accept(this, argu);
      params.add(_ret.toString());
      params.add(n.f1.f0.toString());
      n.f1.accept(this, argu);

      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
   
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret = (R) ("int[]");
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) ("boolean");
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R) ("int");
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    *       | MessageSendStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> RhsExpression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> DotExpression()
    *       | Expression()
    */
   public R visit(RhsExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ( InlineAnn() )?
    * f1 -> ( VoidMessageSendStmt() | RetMessageSendStmt() )
    */
   public R visit(MessageSendStatement n, A argu) {
      R _ret=null;

      create = true;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      create = false;
      return _ret;
   }

   /**
    * f0 -> MessageSend()
    * f1 -> ";"
    */
   public R visit(VoidMessageSendStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> MessageSend()
    * f3 -> ";"
    */
   public R visit(RetMessageSendStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SCOMMENT1>
    * f1 -> <INLINE>
    * f2 -> <SCOMMENT2>
    */
   public R visit(InlineAnn n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
 
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String n1 =n.f0.toString();
      _ret = (R) (n1);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      if(create)
      {

         String s = "new " + n.f1.f0.toString()+"()";
         Map<String, Vector<String>> d = Method_var.get(ClassName).get(MethodName);
         ctr++;
         Vector<String> x = new Vector<>();
         x.add(n.f1.f0.toString());
         x.add("Itachi_uchiha"+Integer.toString(ctr));
         d.put(s, x);
      }
      
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(DotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
