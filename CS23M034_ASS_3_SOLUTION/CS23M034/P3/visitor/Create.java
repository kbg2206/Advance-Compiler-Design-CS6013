//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Create<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   Vector<Map<String,Map<String,String>>> MapInfo=new Vector<>();
   Map<String,Map<String,String>> classMap= new HashMap<>();
   String className="";
   public String ans="";
   Vector<Integer> forLoopendStat = new Vector<>();
   int ctr=-1;
   
   public R visit(NodeList n, A argu) {
    R _ret=null;
    int _count=0;
    String t="";
    for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
       _ret=e.nextElement().accept(this,argu);
       if(_ret!=null)
       {
          t+=_ret.toString();
       }
       _count++;
    }
    return _ret=(R)t;
 }

 public R visit(NodeListOptional n, A argu) {
    if ( n.present() ) {
       R _ret=null;
       int _count=0;
       String t="";
       for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
          _ret=e.nextElement().accept(this,argu);
          if(_ret!=null)
          {
             t+=_ret.toString();
             //System.out.println(t);
          }
          _count++;
       }
       return _ret=(R)t;
    }
    else
       return null;
 }

 public R visit(NodeOptional n, A argu) {
    String t="";
    R _ret=null;
    if ( n.present() )
    {
       _ret=n.node.accept(this,argu);
       return _ret;
    }
    else
       return (R)t;
 }

 public R visit(NodeSequence n, A argu) {
    R _ret=null;
    String t="";
    int _count=0;
    for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
       _ret=e.nextElement().accept(this,argu);
       if(_ret!=null)
       {
          t+=_ret.toString();
       }
       _count++;
    }
    return _ret=(R)t;
 }

 public R visit(NodeToken n, A argu) { return null; }


   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;

      Info table=(Info) argu;
      MapInfo=table.varInfo;
      classMap=table.classMap;
      forLoopendStat=table.forLoopendStat;
      

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      className=n.f1.f0.toString();
      ans+="\nclass"+" "+n.f1.f0.toString()+"\n{\n"+"     public static void main (String[] "+n.f11.f0.toString()+")\n        {\n";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      ctr++;
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      n.f17.accept(this, argu);
      ans+="\n        }\n}\n\n";
      ctr=-1;
      MapInfo.remove(0);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      ans+="\nclass "+n.f1.f0.toString()+"\n{\n";
      className=n.f1.f0.toString();
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      ans+="\n}\n\n";
      ctr=-1;
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      ans+="\nclass "+n.f1.f0.toString()+" extends "+n.f3.f0.toString()+"\n{\n";
      className=n.f1.f0.toString();
      String extendClass= n.f3.f0.toString();
      Map<String,String> extendMap=new HashMap<>(classMap.get(extendClass));
      for(String key:extendMap.keySet())
      {
        classMap.get(className).put(key,extendMap.get(key));
      }
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      ans+="\n}\n\n";
      ctr=-1;
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      //System.out.println(ans);
      ans+="            "+_ret.toString()+" "+ n.f1.f0.toString()+" ;\n";
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null,t1,t2;
      ans+="\n    public";
      n.f0.accept(this, argu);
      t1=n.f1.accept(this, argu);
      ans+=" "+t1.toString()+" "+n.f2.f0.toString()+"(";
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      ans+=")\n     {\n";
      n.f5.accept(this, argu);
      
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      ctr++;
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      t2=n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      ans+="            return "+ t2.toString()+" ;\n";
      ans+="     }";
      ctr=-1;
      MapInfo.remove(0);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      ans+=_ret.toString()+" "+n.f1.f0.toString();
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ans+=",";
      n.f1.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      _ret=(R)("int[]");
      return _ret;
   }
   
   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)("boolean");
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)("int");
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      ans+="\n            {\n";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      ans+="            }\n";
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      ans+="            "+n.f0.f0.toString()+" = "+_ret.toString()+" ;\n";
      ctr++;
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null,t1,t2;
     
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t1=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      t2=n.f5.accept(this, argu);
      n.f6.accept(this, argu);

      ans+="            "+n.f0.f0.toString()+"["+t1.toString()+"] = ";
      ans+=t2.toString()+" ;\n";
      ctr++;
      

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null,t1,t2,t3;
      
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      t3=n.f4.accept(this, argu);
      n.f5.accept(this, argu);

      ans+=t1.toString()+".";
      ans+=t2.toString()+" = ";
      ans+=t3.toString()+" ;\n";

      ctr++;


      
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null,t2;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);
      n.f3.accept(this, argu);

      ans+="            if"+"("+t2.toString()+")";
      


      n.f4.accept(this, argu);


      ctr++;
      n.f5.accept(this, argu);
      ans+="            else";
      n.f6.accept(this, argu);
      ctr++;

      
      
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null,t2;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);

      ans+="            while"+"("+t2.toString()+")";
    
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      ctr++;
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) {
      R _ret=null,t1,t2,t3;

      int currentctr;

      String res="            for(";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);


      t1=n.f4.accept(this, argu);
      ctr++;
      res+=n.f2.f0.toString()+" = "+t1.toString()+";";

      n.f5.accept(this, argu);
      t2=n.f6.accept(this, argu);

      res+=t2.toString()+";";


      currentctr=ctr;
      ctr=forLoopendStat.firstElement();
      forLoopendStat.remove(0);

      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      t2=n.f10.accept(this, argu);
      res+=n.f8.f0.toString()+" = "+t2.toString()+")";
      ctr=currentctr;
      ans+=res;

      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      ctr++;
      ctr++;
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null,t2;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(t2!=null)
      {
        ans+="            System.out.println("+t2.toString()+") ;\n";
      }
      else
      {
        ans+="          System.out.println("+n.f2.f0.toString()+") ;\n";
      }
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | FieldRead()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null,t1,t2;
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);

      String n1,n2;
      n1=t1.toString();
      n2=t2.toString();
      Map<String,String> innerMap=MapInfo.firstElement().get("stat"+Integer.toString(ctr));
      if(innerMap.containsKey(n1) || innerMap.containsKey(n2)|| classMap.get(className).containsKey(n1) || classMap.get(className).containsKey(n2))
      {
        _ret=(R)(n1+" & "+n2);
      }
      else
      {
        boolean a= Boolean.parseBoolean(n1);
        boolean b= Boolean.parseBoolean(n2);
        boolean res=a&b;
        _ret=(R)(Boolean.toString(res));
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null,t1,t2;
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);


      String n1,n2;
      n1=t1.toString();
      n2=t2.toString();
      Map<String,String> innerMap=MapInfo.firstElement().get("stat"+Integer.toString(ctr));
      if(innerMap.containsKey(n1) || innerMap.containsKey(n2)|| classMap.get(className).containsKey(n1) || classMap.get(className).containsKey(n2))
      {
        _ret=(R)(n1+" < "+n2);
      }
      else
      {
        int a= Integer.parseInt(n1);
        int b= Integer.parseInt(n2);
        boolean res=(a < b);
        _ret=(R)(Boolean.toString(res));
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null,t1,t2;
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);
      String n1,n2;

      n1=t1.toString();
      n2=t2.toString();
      //System.out.println(n1+" "+n1);
      Map<String,String> innerMap=MapInfo.firstElement().get("stat"+Integer.toString(ctr));
      
      if(innerMap.containsKey(n1) || innerMap.containsKey(n2) || classMap.get(className).containsKey(n1) || classMap.get(className).containsKey(n2))
      {
        _ret=(R)(n1+" + "+n2);
      }
      else
      {
        //System.out.println(n1+" "+n1);
        int a=Integer.parseInt(n1);
        int b=Integer.parseInt(n2);
       
        int res=a+b;
        _ret=(R)(Integer.toString(res));
      }
      
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */
   public R visit(MinusExpression n, A argu) {
    R _ret=null,t1,t2;
    t1=n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    t2=n.f2.accept(this, argu);
    String n1,n2;
    n1=t1.toString();
    n2=t2.toString();
    Map<String,String> innerMap=MapInfo.firstElement().get("stat"+Integer.toString(ctr));
    if(innerMap.containsKey(n1) || innerMap.containsKey(n2)|| classMap.get(className).containsKey(n1) || classMap.get(className).containsKey(n2))
    {
      _ret=(R)(n1+" - "+n2);
    }
    else
    {
      int a=Integer.parseInt(n1);
      int b=Integer.parseInt(n2);
      int res=a-b;
      _ret=(R)(Integer.toString(res));
    }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */
   public R visit(TimesExpression n, A argu) {
    R _ret=null,t1,t2;
    t1=n.f0.accept(this, argu);
    n.f1.accept(this, argu);
    t2=n.f2.accept(this, argu);
    String n1,n2;
    n1=t1.toString();
    n2=t2.toString();
    Map<String,String> innerMap=MapInfo.firstElement().get("stat"+Integer.toString(ctr));
    if(innerMap.containsKey(n1) || innerMap.containsKey(n2)|| classMap.get(className).containsKey(n1) || classMap.get(className).containsKey(n2))
    {
      _ret=(R)(n1+" * "+n2);
    }
    else
    {
      int a=Integer.parseInt(n1);
      int b=Integer.parseInt(n2);
      int res=a*b;
      _ret=(R)(Integer.toString(res));
    }

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null,t1,t2;
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String res="";

      res+=t1.toString()+"[";
      res+=t2.toString()+"]";

    

      _ret=(R)(res);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null,t1;
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      _ret=(R)(t1.toString()+".length");

     
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */
   public R visit(FieldRead n, A argu) {
      R _ret=null,t1,t2;
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);


      String res="";
      res+=t1.toString()+".";
      res+=t2.toString();
      

      _ret=(R)(res);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    **/
   public R visit(MessageSend n, A argu) {
      R _ret=null,t1,t2,t3;
      t1=n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t2=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      t3=n.f4.accept(this, argu);
      n.f5.accept(this, argu);


      String res="";
      res+=t1.toString();
      res+=".";
      res+=t2.toString();
      res+="(";
      res+=t3.toString()+")";

      

      _ret=(R)(res);

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */
   public R visit(ArgList n, A argu) {
      R _ret=null,t1,t2;
      t1=n.f0.accept(this, argu);
      t2=n.f1.accept(this, argu);
      if(t2!=null) _ret=(R)(t1.toString()+t2.toString());
      else _ret=(R)(t1.toString());
      
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(ArgRest n, A argu) {
      R _ret=null,t1;
      n.f0.accept(this, argu);
      t1=n.f1.accept(this, argu);
      _ret=(R)(","+t1.toString());
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret= (R)(n.f0.toString());
      

      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret= (R)(n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret= (R)(n.f0.toString());
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String identifierName=n.f0.toString();

      if(ctr!=-1)
      {

      
        //System.out.println(ans);
        Map<String,Map<String,String>> outerMap = MapInfo.firstElement();
        Map<String,String> innerMap=outerMap.get("stat"+Integer.toString(ctr));
        
        //System.out.println(className+"      "+identifierName+"      "+ctr);
        //System.out.println(ans);
        if(innerMap.containsKey(identifierName))
        {
                String val=innerMap.get(identifierName);

                if(val.equals("B")==false)
                {
                    _ret=(R)(val);
                    
                }
                else
                {
                    _ret= (R)(identifierName);
                }
                
        }
        else
        {
            _ret= (R)(identifierName);
        }
        
      }
      else
      {
        _ret= (R)(identifierName);
      }
     

      

      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)("this");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null,t1;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      t1=n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      _ret = (R)("new int["+t1.toString()+"]");
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      _ret=(R)("new "+n.f1.f0.toString()+"()");
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null,t1;
      n.f0.accept(this, argu);
      t1=n.f1.accept(this, argu);

      String val=t1.toString();
      if(val.equals("true"))
      {
        _ret=(R)("false");
      }
      else if (val.equals("false"))
      {
        _ret=(R)("true");
      }
      else
      {
        _ret=(R)("!"+t1.toString());
      }
      

      return _ret;
   }

}
