//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Info<R> implements GJNoArguVisitor<R> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public Vector<Map<String,Map<String,String>>> varInfo=new Vector<>();
   Stack<Map<String,String>> ifStack= new Stack<>();
   Stack<Map<String,String>> elseStack= new Stack<>();
   public Map<String,Map<String,String>> classMap=new HashMap<>();
   public Vector<Integer> forLoopendStat = new Vector<>();

   Map<String,String> identityMap=new HashMap<>();

   String currentClass = "";
   String currentMethod="";
   int ctr=-1;

   

   public R visit(NodeList n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n) {
      if ( n.present() )
         return n.node.accept(this);
      else
         return null;
   }

   public R visit(NodeSequence n) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);


      // for(int i=0;i<varInfo.size();++i)
      // {
      //   System.out.println("------------ method -----------");
      //   for(String k2:varInfo.get(i).keySet())
      //   {
      //       System.out.println(k2);
      //       for(String k3:varInfo.get(i).get(k2).keySet())
      //       {
      //          System.out.println(k3+" "+varInfo.get(i).get(k2).get(k3));
          
      //       }
      //       System.out.println();
      //   }
        
      //  }
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> ( VarDeclaration() )*
    * f15 -> ( Statement() )*
    * f16 -> "}"
    * f17 -> "}"
    */
   public R visit(MainClass n) {
      R _ret=null;

      String className=n.f1.f0.toString();
      String methodName="main";
      currentClass=className;
      currentMethod=methodName;
      Map<String,Map<String,String>> outerMap=new HashMap<>();
      Map<String,String> innerMap=new HashMap<>();
      ctr++;
      outerMap.put("stat"+Integer.toString(ctr),innerMap);
      varInfo.add(outerMap);

      Map<String,String> innerClass= new HashMap<>();
      classMap.put(currentClass,innerClass);

      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      n.f13.accept(this);
      n.f14.accept(this);

      n.f15.accept(this);
      n.f16.accept(this);
      n.f17.accept(this);
      ctr=-1;
      identityMap.clear();

     
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n) {
      R _ret=null;
      String className=n.f1.f0.toString();
      currentClass=className;
      currentMethod=className;
      Map<String,String> innerClass= new HashMap<>();
      classMap.put(className,innerClass);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      ctr=-1;
      identityMap.clear();
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n) {
      R _ret=null;
      String className=n.f1.f0.toString();
      currentClass=className;
      currentMethod=className;
      Map<String,String> innerClass= new HashMap<>();
      classMap.put(className,innerClass);
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      ctr=-1;
      identityMap.clear();
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n) {
      R _ret=null;

     // System.out.println(currentMethod);
     String varName=n.f1.f0.toString();
      if(currentClass.equals(currentMethod)==false)
      {
        
        Map<String,String> innerMap=varInfo.lastElement().get("stat"+Integer.toString(ctr));
        innerMap.put(varName,"T");
        identityMap.put(varName,"T");
      }
      else
      {
         Map<String,String> innerClass= classMap.get(currentClass);
         innerClass.put(varName,"B");
      }

      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Identifier()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n) {
      R _ret=null;

      currentMethod=n.f2.f0.toString();
      Map<String,Map<String,String>> outerMap=new HashMap<>();
      Map<String,String> innerMap=new HashMap<>();
      ctr++;
      outerMap.put("stat"+Integer.toString(ctr),innerMap);
      varInfo.add(outerMap);
      
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      n.f7.accept(this);
      n.f8.accept(this);
      n.f9.accept(this);
      n.f10.accept(this);
      n.f11.accept(this);
      n.f12.accept(this);
      ctr=-1;
      identityMap.clear();
      
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n) {
      R _ret=null;

      String varName=n.f1.f0.toString();
      Map<String,String> innerMap=varInfo.lastElement().get("stat"+Integer.toString(ctr));
      innerMap.put(varName,"B");
      identityMap.put(varName,"T");

      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n) {
      R _ret=null;
      n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */


   //check 
   public R visit(AssignmentStatement n) {
      R _ret=null;
      
      Map<String,Map<String,String>> outerMap=varInfo.lastElement();
      Map<String,String> innerMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
      String identifierName=n.f0.f0.toString();
      n.f0.accept(this);
      n.f1.accept(this);
      _ret=n.f2.accept(this);
      n.f3.accept(this);


      ctr++;
      if(innerMap.containsKey(identifierName))
      {
         innerMap.put(identifierName,_ret.toString()); // either a constant or bottom 
         outerMap.put("stat"+Integer.toString(ctr),innerMap);
      }
      else // if identifier is a class variable 
      {
         outerMap.put("stat"+Integer.toString(ctr),innerMap);
      }

      

      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Identifier()
    * f6 -> ";"
    */

   //check
   public R visit(ArrayAssignmentStatement n) {
      R _ret=null;
      Map<String,Map<String,String>> outerMap=varInfo.lastElement();
      Map<String,String> innerMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
      //String identifierName=n.f0.f0.toString();
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      n.f6.accept(this);
      ctr++;
      outerMap.put("stat"+Integer.toString(ctr),innerMap);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Identifier()
    * f5 -> ";"
    */

   //check
   public R visit(FieldAssignmentStatement n) {
      R _ret=null;
      Map<String,Map<String,String>> outerMap=varInfo.lastElement();
      Map<String,String> innerMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      ctr++;
      outerMap.put("stat"+Integer.toString(ctr),innerMap);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */

   //check
   public R visit(IfStatement n) {
      R _ret=null;

      String identifier=n.f2.f0.toString(); // three case possible false,true, bottom
      Map<String,Map<String,String>> outerMap=varInfo.lastElement();
      Map<String,String> innerMap=outerMap.get("stat"+Integer.toString(ctr));
      String val;
      if(innerMap.containsKey(identifier))
      {
         val=innerMap.get(identifier);
      }
      else
      {
         val="B";
      }
      
      
      if(val.equals("true"))
      {


         n.f0.accept(this);
         n.f1.accept(this);
         n.f2.accept(this);
         n.f3.accept(this);
         n.f4.accept(this);


         Map<String,String> outMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
         ifStack.push(outMap);
         ctr++;
         outerMap.put("stat"+Integer.toString(ctr),innerMap);


         n.f5.accept(this);
         n.f6.accept(this);


         elseStack.push(identityMap);

      }
      else if(val.equals("false"))
      {
         n.f0.accept(this);
         n.f1.accept(this);
         n.f2.accept(this);
         n.f3.accept(this);
         n.f4.accept(this);

         ifStack.push(identityMap);
         ctr++;
         outerMap.put("stat"+Integer.toString(ctr),innerMap);

         n.f5.accept(this);
         n.f6.accept(this);


         Map<String,String> outMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
         elseStack.push(outMap);
      }
      else
      {  
         
         n.f0.accept(this);
         n.f1.accept(this);
         n.f2.accept(this);
         n.f3.accept(this);
         n.f4.accept(this);


         Map<String,String> outMap1=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
         ifStack.push(outMap1);
         ctr++;
         outerMap.put("stat"+Integer.toString(ctr),innerMap);


         n.f5.accept(this);
         n.f6.accept(this);
         Map<String,String> outMap2=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
         elseStack.push(outMap2);
      }

      Map<String,String> first=ifStack.pop();
      Map<String,String> second=elseStack.pop();
      Map<String,String> changeMap=new HashMap<>();

      for(String key:first.keySet())
      {
         String val1=first.get(key);
         String val2=second.get(key);

         if(val1.equals("B") || val2.equals("B"))
         {
            changeMap.put(key,"B");
         }
         else if(val1.equals("T"))
         {
            changeMap.put(key,val2);
         }
         else if(val2.equals("T"))
         {
            changeMap.put(key,val1);
         }
         else if(val1.equals(val2))
         {
            changeMap.put(key,val1);
         }
         else
         {
            changeMap.put(key, "B");
         }
         
      }
      ctr++;
      
      outerMap.put("stat"+Integer.toString(ctr),changeMap);
      

      




      // n.f0.accept(this);
      // n.f1.accept(this);
      // n.f2.accept(this);
      // n.f3.accept(this);
      // n.f4.accept(this);
      // n.f5.accept(this);
      // n.f6.accept(this);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> Statement()
    */


   //check
   public R visit(WhileStatement n) {
      R _ret=null;

     String cond=n.f2.f0.toString();
     Map<String,Map<String,String>> outerMap=varInfo.lastElement();
     Map<String,String> innerMap=outerMap.get("stat"+Integer.toString(ctr));
     int start;
     int end;
     String val;
     boolean flag;



     if(innerMap.containsKey(cond))
     {
       val=innerMap.get(cond);
     }
     else
     {
       val="B";
     }
     
    // case when val is bottom or true  
     if(val.equals("false")==false)
     {

      do{

         start=ctr; // 3
         n.f0.accept(this);
         n.f1.accept(this);
         n.f2.accept(this);
         n.f3.accept(this);
         n.f4.accept(this);
         end=ctr; // 7 

         Map<String,String> first=innerMap;
         Map<String,String> second=outerMap.get("stat"+Integer.toString(end));

         
         
         
         flag=false;
         for(String key: first.keySet())
         {

            if(first.get(key).equals("B") == false)
            {
               if(first.get(key).equals("T") && first.get(key).equals(second.get(key))==false)
               {
                  flag=true;
                  first.put(key,second.get(key));
               }
               else if(first.get(key).equals(second.get(key))==false)
               {
                  flag=true;
                  first.put(key,"B");
               }
            }


            // if(first.get(key).equals(second.get(key))==false && first.get(key).equals("B")==false)
            // {
            //    flag=true;
            //    if(first.get(key).equals("T")==true)
            //    {
            //       first.put(key,second.get(key));
            //    }
            //    else
            //    {
            //       first.put(key,"B");
            //    }
            // }

            
            
         }
         

         if(flag)
         {
            ctr=start;
         }
         
      }while(flag );

      ctr++;
      Map<String,String> innerMap2=new HashMap<>(innerMap);
      outerMap.put("stat"+Integer.toString(ctr),innerMap2);
      
     }
     else
     {
         n.f0.accept(this);
         n.f1.accept(this);
         n.f2.accept(this);
         n.f3.accept(this);
         n.f4.accept(this);

         ctr++;
         Map<String,String> innerMap2=new HashMap<>(innerMap);
         outerMap.put("stat"+Integer.toString(ctr),innerMap2);
     }

      

        
      
      
       
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n) {
      R _ret=null,t1,t2,t3;

      String identifierName=n.f2.f0.toString();
      Map<String,Map<String,String>> outerMap=varInfo.lastElement();
      Map<String,String> innerMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
      
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      t1=n.f4.accept(this);

      ctr++;
      if(innerMap.containsKey(identifierName))
      {
         innerMap.put(identifierName,t1.toString());
         outerMap.put("stat"+Integer.toString(ctr),innerMap);
      }
      else
      {
         outerMap.put("stat"+Integer.toString(ctr),innerMap);
      }


      n.f5.accept(this);
      t2=n.f6.accept(this);

      Map<String,String> inMap=innerMap;
      String val=t2.toString();

      int start;
      int end;
      boolean flag;
      int forend;
      start=ctr;

      if(val.equals("false")==false)
      {
         do
         {
            identifierName=n.f8.f0.toString();
            n.f7.accept(this);
            // n.f8.accept(this);
            // n.f9.accept(this);
            // n.f10.accept(this);
            n.f11.accept(this);
            n.f12.accept(this);

            n.f8.accept(this);
            n.f9.accept(this);
            t3=n.f10.accept(this);

            forend=ctr;
            Map<String,String> lastMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
            ctr++;
            if(lastMap.containsKey(identifierName))
            {
               lastMap.put(identifierName,t3.toString());
               outerMap.put("stat"+Integer.toString(ctr),lastMap);
            }
            else
            {
               outerMap.put("stat"+Integer.toString(ctr),lastMap);
            }
            end=ctr;



            Map<String,String> first=inMap;
            Map<String,String> second=outerMap.get("stat"+Integer.toString(end));

            
            
            
            flag=false;
            for(String key: first.keySet())
            {

               if(first.get(key).equals("B") == false)
               {
                  if(first.get(key).equals("T") && first.get(key).equals(second.get(key))==false)
                  {
                     flag=true;
                     first.put(key,second.get(key));
                  }
                  else if(first.get(key).equals(second.get(key))==false)
                  {
                     flag=true;
                     first.put(key,"B");
                  }
               }
            }
            

            if(flag)
            {
               ctr=start;
            }

         }while(flag);

         ctr++;
         outerMap.put("stat"+Integer.toString(ctr),innerMap);

      }
      else
      {
         n.f7.accept(this);
         // n.f8.accept(this);
         // n.f9.accept(this);
         // n.f10.accept(this);
         n.f11.accept(this);
         n.f12.accept(this);

         n.f8.accept(this);
         n.f9.accept(this);
         t3=n.f10.accept(this);
         forend=ctr;

         Map<String,String> lastMap=new HashMap<>(outerMap.get("stat"+Integer.toString(ctr)));
         ctr++;
         if(lastMap.containsKey(identifierName))
         {
            lastMap.put(identifierName,t3.toString());
            outerMap.put("stat"+Integer.toString(ctr),lastMap);
         }
         else
         {
            outerMap.put("stat"+Integer.toString(ctr),lastMap);
         }

         ctr++;
         Map<String,String> innerMap2=new HashMap<>(innerMap);
         outerMap.put("stat"+Integer.toString(ctr),innerMap2);

      }

      forLoopendStat.add(forend);


      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> ")"
    * f4 -> ";"
    */

   //check
   public R visit(PrintStatement n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | FieldRead()
    *       | PrimaryExpression()
    */

   //check
   public R visit(Expression n) {
      R _ret=null;
      _ret=n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "&"
    * f2 -> Identifier()
    */

   //check
   public R visit(AndExpression n) {
      R _ret=null;
      R t1,t2;
      t1=n.f0.accept(this);
      n.f1.accept(this);
      t2=n.f2.accept(this);

      String n1,n2;
      n1=t1.toString();
      n2=t2.toString();
      if(n1.equals("B") || n2.equals("B"))
      {
         _ret=(R)("B");
      }
      else
      {
         boolean a= Boolean.parseBoolean(n1);
         boolean b= Boolean.parseBoolean(n2);
         boolean res=a&b;
         _ret=(R)(Boolean.toString(res));
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "<"
    * f2 -> Identifier()
    */

   //check
   public R visit(CompareExpression n) {
      R _ret=null;
      R t1,t2;
      t1=n.f0.accept(this);
      n.f1.accept(this);
      t2=n.f2.accept(this);

      String n1,n2;
      n1=t1.toString();
      n2=t2.toString();
      if(n1.equals("B") || n2.equals("B"))
      {
         _ret=(R)("B");
      }
      else
      {
         int a= Integer.parseInt(n1);
         int b= Integer.parseInt(n2);
         boolean res=(a < b);
         _ret=(R)(Boolean.toString(res));
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "+"
    * f2 -> Identifier()
    */

   //check
   public R visit(PlusExpression n) {
      R _ret=null;
      R t1,t2;
      t1=n.f0.accept(this);
      n.f1.accept(this);
      t2=n.f2.accept(this);

      String n1,n2;
      n1=t1.toString();
      n2=t2.toString();
      if(n1.equals("B") || n2.equals("B"))
      {
         _ret=(R)("B");
      }
      else
      {
         int a=Integer.parseInt(n1);
         int b=Integer.parseInt(n2);
         int res=a+b;
         _ret=(R)(Integer.toString(res));
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "-"
    * f2 -> Identifier()
    */

    //check
   public R visit(MinusExpression n) {
      R _ret=null;
      R t1,t2;
      t1=n.f0.accept(this);
      n.f1.accept(this);
      t2=n.f2.accept(this);

      String n1,n2;
      n1=t1.toString();
      n2=t2.toString();
      if(n1.equals("B") || n2.equals("B"))
      {
         _ret=(R)("B");
      }
      else
      {
         int a=Integer.parseInt(n1);
         int b=Integer.parseInt(n2);
         int res=a-b;
         _ret=(R)(Integer.toString(res));
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "*"
    * f2 -> Identifier()
    */

    //check
    //Only two types of value of identifier possible either bottom or some constant 
   public R visit(TimesExpression n) {
      R _ret=null;
      R t1,t2;
      t1=n.f0.accept(this);
      n.f1.accept(this);
      t2=n.f2.accept(this);

      String n1,n2;
     // System.out.println(t1.toString());
      n1=t1.toString();
      n2=t2.toString();

      if(n1.equals("B") || n2.equals("B"))
      {
         _ret=(R)("B");
      }
      else
      {
         int a=Integer.parseInt(n1);
         int b=Integer.parseInt(n2);
         int res=a*b;
         _ret=(R)(Integer.toString(res));
      }
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Identifier()
    * f3 -> "]"
    */

   //check
   public R visit(ArrayLookup n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      _ret=(R)("B");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> "length"
    */

   //check
   public R visit(ArrayLength n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      _ret =(R)("B");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "."
    * f2 -> Identifier()
    */


   //check
   public R visit(FieldRead n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      _ret = (R)("B");
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ArgList() )?
    * f5 -> ")"
    */


   //check
   public R visit(MessageSend n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      n.f5.accept(this);
      _ret =(R)("B");
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( ArgRest() )*
    */


   //check
   public R visit(ArgList n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */

   //check
   public R visit(ArgRest n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    */
   public R visit(PrimaryExpression n) {
      R _ret=null;
      _ret=n.f0.accept(this);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */


   //check
   public R visit(IntegerLiteral n) {
      R _ret=null;
      String integerValue=n.f0.toString();
      n.f0.accept(this);
      _ret=(R)(integerValue);
      return _ret;
   }

   /**
    * f0 -> "true"
    */

   //check
   public R visit(TrueLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      _ret=(R)("true");
      return _ret;
   }

   /**
    * f0 -> "false"
    */

   //check
   public R visit(FalseLiteral n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)("false");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */

   //check
   public R visit(Identifier n) {
      R _ret=null;
      String identifierName=n.f0.toString();
   
      n.f0.accept(this);
      
      if(ctr!=-1)
      {
         Map<String,Map<String,String>> outerMap=varInfo.lastElement();
         Map<String,String> innerMap=outerMap.get("stat"+Integer.toString(ctr));
         if(innerMap.containsKey(identifierName))
         {
            String val=innerMap.get(identifierName);
            _ret=(R)(val);
         }
         else
         {
            _ret=(R)("B");
         }

      }
      else
      {
         _ret=(R)("B");
      }

      return _ret;
   }

   /**
    * f0 -> "this"
    */

   //check
   public R visit(ThisExpression n) {
      R _ret=null;
      n.f0.accept(this);
      _ret = (R)("B");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Identifier()
    * f4 -> "]"
    */

   //check
   public R visit(ArrayAllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      n.f4.accept(this);
      _ret =(R)("B");
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */

   //check
   public R visit(AllocationExpression n) {
      R _ret=null;
      n.f0.accept(this);
      n.f1.accept(this);
      n.f2.accept(this);
      n.f3.accept(this);
      _ret =(R)("B");
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> Identifier()
    */


   //check
   public R visit(NotExpression n) {
      R _ret=null;
      n.f0.accept(this);
      _ret=n.f1.accept(this);



      String t=_ret.toString();
      if(t.equals("true"))
      {
         _ret=(R)("false");
      }
      else if(t.equals("false"))
      {
         _ret=(R)("true");
      }
      else
      {
         _ret=(R)("B");
      }
      return _ret;
   }

}
