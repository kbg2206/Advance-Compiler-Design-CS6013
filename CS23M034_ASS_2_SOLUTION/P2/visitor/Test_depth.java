//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Test_depth<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public String ans="";
   Map<String,Map<String,Map<String,Vector<String>>>> table =new HashMap<>();
   Vector<Vector<String>> scope=new Vector<>();
   Vector<String> str=new Vector<>();
   Vector<String> str2=new Vector<>();
   String extendedClass="";
   String currentScope="";
   String methodscope="";
   int ctr=0;
   

   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      Variable var=(Variable) argu;
      table=var.storeMap;
      scope=var.scope;


      argu =(A)"";
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {

      R _ret=null;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      String name1=n.f1.f0.toString();
      
      currentScope=name1;
      methodscope="main";

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);

      //String name2=n.f11.f0.toString();

      n.f12.accept(this, argu);
      n.f13.accept(this, argu);

      

      Map<String,Vector<String>> mainmap=table.get(currentScope).get(methodscope);
      Vector<String> arr=scope.get(0);
      
      for(int i=0;i<arr.size();++i)
      {
         ans+=arr.get(i);
      }
      scope.remove(0);
      String var="";
      for(String key:mainmap.keySet())
      {
         var="       "+mainmap.get(key).get(0)+" "+key+";\n"+var;
      }
      ans+=var;
      
      

      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+=arr1.get(i);
      }
      scope.remove(0);
      
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      String name1=n.f1.f0.toString();
      methodscope="main";
      currentScope=name1;
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+=arr1.get(i);
      }
      scope.remove(0);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Map<String,Vector<String>> classmap=table.get(currentScope).get(methodscope);
      //System.out.println(currentScope+" "+methodscope);
         String var="";
         
         for(String key:classmap.keySet())
         {
           
            var="   "+classmap.get(key).get(0)+" "+key+";\n"+var;
            
         }
         //System.out.println(classmap.size());
         ans+=var;
      
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      Vector<String> arr2=scope.get(0);
      
      for(int i=0;i<arr2.size();++i)
      {
         ans+=arr2.get(i);
      }
      scope.remove(0);
      str2=new Vector<>();
      
    
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      String name1=n.f1.f0.toString();
      methodscope="main";
      currentScope=name1;
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+=arr1.get(i);
      }
      scope.remove(0);

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      if(table.get(currentScope).containsKey("main") )
      {
         Map<String,Vector<String>> classmap=table.get(currentScope).get(methodscope);
         String var="";
         for(String key:classmap.keySet())
         {
            if(table.get(n.f3.f0.toString()).containsKey("main") && table.get(n.f3.f0.toString()).get("main").containsKey(key))
            {

            }
            else
            {
               var="   "+classmap.get(key).get(0)+" "+key+";\n"+var;
            }
            
         }
         ans+=var;
      }
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      // if(table.get(currentScope).containsKey("main"))
      // {
      //    Map<String,Vector<String>> classmap=table.get(currentScope).get(methodscope);
      //    String var="";
      //    for(String key:classmap.keySet())
      //    {
      //       var="   "+classmap.get(key).get(0)+" "+key+";\n"+var;
      //    }
      //    ans+=var;
      // }
      
      Vector<String> arr2=scope.get(0);
      
      for(int i=0;i<arr2.size();++i)
      {
         ans+=arr2.get(i);
      }
      scope.remove(0);
      str2=new Vector<>();
      
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(methodscope.equals("main") )
      {
         for(String key:table.get(currentScope).get("main").keySet())
         {
            str2.add(key);
            //System.out.println(currentScope+" "+key);

         }
         
         
      }
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+=arr1.get(i);
      }
      scope.remove(0);
      String name1=n.f2.f0.toString();
      
      methodscope=name1;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      
      Map<String,Vector<String>> classmap=table.get(currentScope).get(methodscope);
      String var="";
      
      for(String key:classmap.keySet())
      {
         
         if(str.contains(key) || str2.contains(key))
         {
            
         }
         else
         {
            
            var="   "+classmap.get(key).get(0)+" "+key+";\n"+var;
         }
      }
      
      ans+=var;
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      Vector<String> arr2=scope.get(0);
      
      for(int i=0;i<arr2.size();++i)
      {
         ans+="   "+arr2.get(i);
      }
      scope.remove(0);
      str=new Vector<>();
      return _ret;

   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      str.add(n.f1.f0.toString());
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+="   "+arr1.get(i);
         
      }
      scope.remove(0);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+="   "+arr1.get(i);
         
      }
      scope.remove(0);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+="   "+arr1.get(i);
         
      }
      scope.remove(0);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      Vector<String> arr2=scope.get(0);
      
      for(int i=0;i<arr2.size();++i)
      {
         ans+="   "+arr2.get(i);
         
      }
      scope.remove(0);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      Vector<String> arr3=scope.get(0);
      
      for(int i=0;i<arr3.size();++i)
      {
         ans+="   "+arr3.get(i);
         
      }
      scope.remove(0);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+="   "+arr1.get(i);
         
      }
      scope.remove(0);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      
      n.f4.accept(this, argu);
      Vector<String> arr2=scope.get(0);
      
      for(int i=0;i<arr2.size();++i)
      {
         ans+="   "+arr2.get(i);
         
      }
      scope.remove(0);
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) {
      R _ret=null;
      Vector<String> arr1=scope.get(0);
      
      for(int i=0;i<arr1.size();++i)
      {
         ans+="   "+arr1.get(i);
         
      }
      scope.remove(0);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      Vector<String> arr3=scope.get(0);
      
      for(int i=0;i<arr3.size();++i)
      {
         ans+="   "+arr3.get(i);
         
      }
      scope.remove(0);
      Vector<String> arr2=scope.get(0);
      
      for(int i=0;i<arr2.size();++i)
      {
         ans+="   "+arr2.get(i);
         
      }
      scope.remove(0);
      Vector<String> arr4=scope.get(0);
      
      for(int i=0;i<arr4.size();++i)
      {
         ans+="   "+arr4.get(i);
         
      }
      scope.remove(0);
      Vector<String> arr5=scope.get(0);
      
      for(int i=0;i<arr5.size();++i)
      {
         ans+="   "+arr5.get(i);
         
      }
      scope.remove(0);
      
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu); 
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      Vector<String> arr=scope.get(0);
      for(int i=0;i<arr.size();++i)
      {
         ans+="       "+arr.get(i);
      }
      scope.remove(0);
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      //Vector<String> first=table.get(currentScope).get(methodscope).get("int");
      
     
      //String var1=n.f0.accept(this, argu).toString();

      //String name1=n.f2.f0.toString();
     // ans+="       "+first.get(0)+"="+var1+"."+name1+"(";
      //first.remove(0);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      //ans+=")\n";
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      //String var1=((Identifier)((PrimaryExpression)n.f0.f0.choice).f0.choice).f0.toString();
      // PrimaryExpression pri=(PrimaryExpression)n.f0.f0.choice;
      // if(pri.f0.choice instanceof Identifier)
      // {
      //       Identifier iden=(Identifier) pri.f0.choice;
      //       ans+=iden.f0.toString();
      // }
      // else if(pri.f0.choice instanceof IntegerLiteral)
      // {
      //       IntegerLiteral ilit=(IntegerLiteral) pri.f0.choice;
      //       Vector<String> vec=table.get(currentScope).get("int");
      //       String var=vec.get(0);
      //       ans+=var;
      //       vec.remove(0);
      // }
      // else
      // {
      //    Vector<String> vec=table.get(currentScope).get("boolean");
      //    String var=vec.get(0);
      //    ans+=var;
      //    vec.remove(0);

      // }
     
      
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      // ans+=",";
      // PrimaryExpression pri=(PrimaryExpression)n.f1.f0.choice;
      // if(pri.f0.choice instanceof Identifier)
      // {
      //       Identifier iden=(Identifier) pri.f0.choice;
      //       ans+=iden.f0.toString();
      // }
      // else if(pri.f0.choice instanceof IntegerLiteral)
      // {
      //       IntegerLiteral ilit=(IntegerLiteral) pri.f0.choice;
      //       Vector<String> vec=table.get(currentScope).get("int");
      //       String var=vec.get(0);
      //       ans+=var;
      //       vec.remove(0);
      // }
      // else
      // {
      //    Vector<String> vec=table.get(currentScope).get("boolean");
      //    String var=vec.get(0);
      //    ans+=var;
      //    vec.remove(0);
      // }
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret = n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;

      n.f0.accept(this, argu);
      
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      //String identifier=n.f1.f0.toString();
      //Vector<String> allocate=table.get(currentScope).get(methodscope).get(identifier);
      //String var=allocate.get(0);
      //ans+="       "+var+"="+" new "+identifier+"();\n";
      //allocate.remove(0);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      //_ret=(R)var;
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> ( MessageSend() | PrimaryExpression() )
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
