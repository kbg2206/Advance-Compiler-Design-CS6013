//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

import javax.print.DocFlavor.STRING;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class Variable<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //

   public Map<String,Map<String,Map<String,Vector<String>>> >storeMap= new HashMap<>();
   Map<String,Map<String,String>> retTypes=new HashMap<>();
   public Vector<Vector<String>> scope=new Vector<>();
   String st="";
   Vector<String>dummy= new Vector<>();
   String currentScope="";
   String methodscope="";
   String ans="";
   int ctr=0;
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      String t="";
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         _ret=e.nextElement().accept(this,argu);
         if(_ret!=null)
         {
            t+=_ret.toString();
         }
         _count++;
      }
      return _ret=(R)t;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         String t="";
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            _ret=e.nextElement().accept(this,argu);
            if(_ret!=null)
            {
               t+=_ret.toString();
               //System.out.println(t);
            }
            _count++;
         }
         return _ret=(R)t;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      String t="";
      if ( n.present() )
      {
         t+=n.node.accept(this,argu).toString();
         return (R)t;
      }
      else
         return (R)t;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      String t="";
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         _ret=e.nextElement().accept(this,argu);
         if(_ret!=null)
         {
            t+=_ret.toString();
         }
         _count++;
      }
      return _ret=(R)t;
   }

   public R visit(NodeToken n, A argu) { return null; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      Return_Type R=(Return_Type)(argu);
      retTypes=R.retMap;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);

      
      
      

      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      //Map<String,Vector<String>> classMap = new HashMap<>();
      String t="class ";

      n.f0.accept(this, argu);
      t+=n.f1.accept(this, argu).toString()+"\n{\npublic static void main (String[] ";
      

      String className=n.f1.f0.toString();
      
      currentScope=className;
      methodscope="main";
      storeMap.put(className,new HashMap<>());
      storeMap.get(currentScope).put(methodscope,new HashMap<>());
    
     
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      t+=n.f11.accept(this, argu).toString()+")\n{\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      t="}\n}\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      
      String t="\nclass ";
      n.f0.accept(this, argu);
      t+=n.f1.accept(this, argu).toString()+"\n{\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();

      String className=n.f1.f0.toString();
      currentScope=className;
      methodscope="main";
      storeMap.put(className,new HashMap<>());
      storeMap.get(className).put(methodscope,new HashMap<>());

      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      t="}\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      String t="class ";
      n.f0.accept(this, argu);
      t+=n.f1.accept(this, argu).toString()+" extends ";

      String className=n.f1.f0.toString();
      
      currentScope=className;
      methodscope="main";
      storeMap.put(className,new HashMap<>());
      storeMap.get(className).put(methodscope,new HashMap<>());
      Map<String,Vector<String>> vec=new HashMap<>();
      for(String key :storeMap.get(n.f3.f0.toString()).get("main").keySet())
      {
         storeMap.get(className).get(methodscope).put(key,storeMap.get(n.f3.f0.toString()).get("main").get(key));
      }
      

      n.f2.accept(this, argu);
      t+=n.f3.accept(this, argu).toString()+"\n{\n";

      String n1=n.f1.f0.toString();
      String n2=n.f3.f0.toString();
   
      
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      t="}\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
    
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String type = n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);

      Map<String,Vector<String>> variableMap=storeMap.get(currentScope).get(methodscope);
      //System.out.println(currentScope);
      String varName=n.f1.f0.toString();
      variableMap.put(varName,new Vector<>());
      //System.out.println(variableMap.get(varName));
      variableMap.get(varName).add(type);
      if(methodscope.equals("main"))
      {
         variableMap.get(varName).add("0");
      }
      // variableMap.get(varName).add("");

      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String t="public ";
      String n1="",n2="";
      n.f0.accept(this, argu);
      n1=n.f1.accept(this, argu).toString();
      t+=n1+" ";
      n2=n.f2.accept(this, argu).toString();
      t+=n2+"(";
      
      


      String methodName=n.f2.f0.toString();
      
      methodscope=methodName;
      
      if(storeMap.get(currentScope).containsKey("main"))
      {
         Map<String,Vector<String>> mp=storeMap.get(currentScope).get("main");
         Map<String,Vector<String>> emp=new HashMap<>();
         for(String key:mp.keySet())
         {
            emp.put(key,mp.get(key));
         }
         storeMap.get(currentScope).put(methodscope,emp);
      }
      else
      {
         storeMap.get(currentScope).put(methodscope,new HashMap<>());
      }

      n.f3.accept(this, argu);
      t+=n.f4.accept(this, argu).toString()+")\n{\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      t="return ";
      n.f9.accept(this, argu);
      t+=n.f10.accept(this, argu).toString()+";\n}\n";
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
    
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      String t="";
      t+=n.f0.accept(this, argu).toString();
      _ret=n.f1.accept(this, argu);
      if(_ret!=null)
      {
         t+=_ret.toString();
      }
      return _ret=(R)(t);
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      String t="";
      String n1="",n2="";
      n1=n.f0.accept(this, argu).toString();
      t+=n1+" ";
      n2=n.f1.accept(this, argu).toString();
      t+=n2;

      Map<String,Vector<String>> variableMap=storeMap.get(currentScope).get(methodscope);
      variableMap.put(n2,new Vector<>());
      variableMap.get(n2).add(n1);
      variableMap.get(n2).add("para");


      return _ret=(R)(t);
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      String t=",";
      n.f0.accept(this, argu);
      t+=n.f1.accept(this, argu).toString();
      return _ret=(R)(t);
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      String t="int[]";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret=(R)(t);
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret = (R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | FieldAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | ForStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      Map<String,Vector<String>> ass=storeMap.get(currentScope).get(methodscope);
      String name=n.f0.f0.toString();
      //System.out.println(name);
      argu=(A)ass.get(name).get(0);
      //argu=(A)("int");

      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
     
      
      if(ass.get(name).size()>1) ass.get(name).remove(ass.get(name).size()-1);

      dummy.add(name+"="+_ret.toString()+";\n");
      scope.add(dummy);
      dummy=new Vector<>();
      ass.get(name).add(_ret.toString());
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String t="";
      t+=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      t+="["+n.f2.accept(this, argu).toString()+"]";
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      _ret=n.f5.accept(this, argu);
      n.f6.accept(this, argu);

     
      // Map<String,Vector<String>> ass=storeMap.get(currentScope);
      // ass.put(t,new Vector<>());
      // if(ass.get(t).size()>1) ass.get(t).remove(ass.get(t).size()-1);
      dummy.add(t+"="+_ret.toString()+";\n");
      scope.add(dummy);
      dummy=new Vector<>();
      // ass.get(t).add(_ret.toString());
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    */
   public R visit(FieldAssignmentStatement n, A argu) {
      R _ret=null;
      String t="";
      t+=n.f0.accept(this, argu).toString()+".";
      n.f1.accept(this, argu);
      t+=n.f2.accept(this, argu).toString()+"=";
      n.f3.accept(this, argu);
      t+=n.f4.accept(this, argu).toString()+";\n";
      n.f5.accept(this, argu);
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      String t="if(";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      t+=n.f2.accept(this, argu).toString()+")\n{\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      t="}\nelse\n{";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      t="}\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();

      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      String n1="";
      String t="while(";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n1=n.f2.accept(this, argu).toString();
      t+=n1+")\n{\n";
      Vector<String> arr=new Vector<>();
      for(int i=0;i<dummy.size();++i)
      {
         arr.add(dummy.get(i));
      }
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      
      t="}\n";
      arr.add(t);
      scope.add(arr);
      //dummy=new Vector<>();
      return _ret;
   }

   /**
    * f0 -> "for"
    * f1 -> "("
    * f2 -> Identifier()
    * f3 -> "="
    * f4 -> Expression()
    * f5 -> ";"
    * f6 -> Expression()
    * f7 -> ";"
    * f8 -> Identifier()
    * f9 -> "="
    * f10 -> Expression()
    * f11 -> ")"
    * f12 -> Statement()
    */
   public R visit(ForStatement n, A argu) {
      R _ret=null;
      String n1="";
      String t="for(";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n1+=n.f2.accept(this, argu).toString()+"=";
      n.f3.accept(this, argu);
      n1+=n.f4.accept(this, argu).toString()+";";
      t+=n1;
      dummy.add(n1+"\n");
      scope.add(dummy);
      dummy=new Vector<>();


      n.f5.accept(this, argu);
      t+=n.f6.accept(this, argu).toString()+";";

      Vector<String> nums=new Vector<>();
      for(int i=0;i<dummy.size();++i)
      {
         nums.add(dummy.get(i));
      }
      scope.add(dummy);
      dummy=new Vector<>();

      n.f7.accept(this, argu);
      String c=n.f8.f0.toString()+"=";
      n.f8.accept(this, argu).toString();
      n.f9.accept(this, argu);
      
      c+=n.f10.accept(this, argu).toString();
      t+=c;
      t+=")\n{\n";

      Vector<String> arr=new Vector<>();
      for(int i=0;i<dummy.size();++i)
      {
         arr.add(dummy.get(i));
      }
      arr.add(c+";");
      dummy=new Vector<>();
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      scope.add(arr);
      t="}\n";
      nums.add(t);
      scope.add(nums);
      dummy=new Vector<>();

      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      String t="";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      _ret=n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      t+="System.out.println("+_ret.toString()+")"+";\n";
      dummy.add(t);
      scope.add(dummy);
      dummy=new Vector<>();
      
      return _ret;
   }

   /**
    * f0 -> AndExpression()
    *       | CompareExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      
      
      String t1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String t2=n.f2.accept(this, argu).toString();

      String type=argu.toString();

      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      
      type="boolean";
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add(type);

      exp.get("temp"+Integer.toString(ctr)).add(t1+"&"+t2);
      dummy.add("temp"+Integer.toString(ctr)+"="+t1+"&"+t2+";\n");
      _ret=(R)("temp"+Integer.toString(ctr));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<"
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String t1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String t2=n.f2.accept(this, argu).toString();
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      String type=argu.toString();
      
      type="boolean";
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add(type);

      exp.get("temp"+Integer.toString(ctr)).add(t1+"<"+t2);
      dummy.add("temp"+Integer.toString(ctr)+"="+t1+"<"+t2+";\n");
      _ret=(R)("temp"+Integer.toString(ctr));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String t1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String t2=n.f2.accept(this, argu).toString();
      ctr++;

      
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      String type=argu.toString();
      type="int";
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add(type);

      exp.get("temp"+Integer.toString(ctr)).add(t1+"+"+t2);
      dummy.add("temp"+Integer.toString(ctr)+"="+t1+"+"+t2+";\n");
      _ret=(R)("temp"+Integer.toString(ctr));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String t1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String t2=n.f2.accept(this, argu).toString();
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      String type=argu.toString();
      type="int";
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add(type);

      exp.get("temp"+Integer.toString(ctr)).add(t1+"-"+t2);
      dummy.add("temp"+Integer.toString(ctr)+"="+t1+"-"+t2+";\n");
      _ret=(R)("temp"+Integer.toString(ctr));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String t1=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      String t2=n.f2.accept(this, argu).toString();
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      String type=argu.toString();
      type="int";
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add(type);

      exp.get("temp"+Integer.toString(ctr)).add(t1+"*"+t2);
      dummy.add("temp"+Integer.toString(ctr)+"="+t1+"*"+t2+";\n");
      _ret=(R)("temp"+Integer.toString(ctr));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String t="";
      t+=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      t+="[";
      t+=n.f2.accept(this, argu).toString();
      t+="]";
      n.f3.accept(this, argu);
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add("int");

      exp.get("temp"+Integer.toString(ctr)).add(t);
      dummy.add("temp"+Integer.toString(ctr)+"="+t+";\n");
      _ret=(R)("temp"+Integer.toString(ctr));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String t="";
      t+=n.f0.accept(this, argu).toString();
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      t+=".length";
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add("int");

      exp.get("temp"+Integer.toString(ctr)).add(t);
      dummy.add("temp"+Integer.toString(ctr)+"="+t+";\n");
      _ret=(R)("temp"+Integer.toString(ctr));
      return _ret;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      Map<String,Vector<String>> messageMap = storeMap.get(currentScope).get(methodscope);

      String t1="",n1="";
      n1=n.f0.accept(this, argu).toString();
      t1+=n1+".";
      n.f1.accept(this, argu);
      String identifierName=n.f2.f0.toString(); 
      t1+=identifierName+"(";
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      t1+=n.f4.accept(this, argu).toString()+")";
      n.f5.accept(this, argu);

      if(n1.equals("this"))
      {
         st=currentScope;
      }
      else 
      {
         st=messageMap.get(n1).get(0);
      }
      String type="int";
      for(String key:retTypes.keySet())
      {
         for(String k:retTypes.get(key).keySet())
         {
            if(k.equals(identifierName+st))
            {
               type=retTypes.get(key).get(k);
            }
         }
      }
      
      //System.out.println(st +" "+identifierName);
      ctr++;
      //it can be any check in the last 
      messageMap.put("temp"+Integer.toString(ctr),new Vector<>());
      messageMap.get("temp"+Integer.toString(ctr)).add(type);
      messageMap.get("temp"+Integer.toString(ctr)).add(t1);
      

      dummy.add("temp"+Integer.toString(ctr)+"="+t1+";\n");
      return _ret=(R)("temp"+Integer.toString(ctr));
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String t1="",t2="";
      t1+=n.f0.accept(this, argu).toString();  
      //System.out.println(t1);   
      _ret=n.f1.accept(this, argu);
      if(_ret!=null)
      {
         t2+=_ret.toString();
      }
      
      return _ret=(R)(t1+t2);
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      
      R _ret=null;
      String t1=",",t2="";

      n.f0.accept(this, argu);
      t2+=n.f1.accept(this, argu).toString();

      return _ret=(R)(t1+t2);
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ctr++;
      String t=n.f0.toString();
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add("int");

      exp.get("temp"+Integer.toString(ctr)).add(t);
      _ret=(R)("temp"+Integer.toString(ctr));
      dummy.add("temp"+Integer.toString(ctr)+"="+t+";\n");
      return _ret;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t=n.f0.toString();
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add("boolean");

      exp.get("temp"+Integer.toString(ctr)).add(t);
      _ret=(R)("temp"+Integer.toString(ctr));
      dummy.add("temp"+Integer.toString(ctr)+"="+t+";\n");
      return _ret;
   }
      
   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String t=n.f0.toString();
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add("boolean");

      exp.get("temp"+Integer.toString(ctr)).add(t);
      _ret=(R)("temp"+Integer.toString(ctr));
      dummy.add("temp"+Integer.toString(ctr)+"="+t+";\n");
      return _ret;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=(R)n.f0.toString();
      return _ret;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add(currentScope);

      exp.get("temp"+Integer.toString(ctr)).add("this");
      _ret=(R)("temp"+Integer.toString(ctr));
      dummy.add("temp"+Integer.toString(ctr)+"="+"this"+";\n");

      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      String t="new int [";
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      t+=n.f3.accept(this, argu).toString();
      n.f4.accept(this, argu);
      t+="]";
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add("int[]");

      exp.get("temp"+Integer.toString(ctr)).add(t);
      _ret=(R)("temp"+Integer.toString(ctr));
      dummy.add("temp"+Integer.toString(ctr)+"="+t+";\n");
      
      return _ret;
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      //st=n.f1.f0.toString();
      Map<String,Vector<String>> messageMap = storeMap.get(currentScope).get(methodscope);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);

      ctr++;
      String identifierName=n.f1.f0.toString();
      messageMap.put("temp"+Integer.toString(ctr),new Vector<>());
      messageMap.get("temp"+Integer.toString(ctr)).add(identifierName);
      messageMap.get("temp"+Integer.toString(ctr)).add("new "+identifierName+"()");
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      _ret=(R)("temp"+Integer.toString(ctr));
      dummy.add("temp"+Integer.toString(ctr)+"="+"new "+identifierName+"()"+";\n");
      return _ret;
   }

   /**
    * f0 -> "!"
    * f1 -> ( MessageSend() | PrimaryExpression() )
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      String t="!";
      n.f0.accept(this, argu);
      t+=n.f1.accept(this, argu);
      ctr++;
      Map<String,Vector<String>> exp=storeMap.get(currentScope).get(methodscope);
      exp.put("temp"+Integer.toString(ctr),new Vector<>());
      exp.get("temp"+Integer.toString(ctr)).add("boolean");

      exp.get("temp"+Integer.toString(ctr)).add(t);
      _ret=(R)("temp"+Integer.toString(ctr));
      dummy.add("temp"+Integer.toString(ctr)+"="+t+";\n");
      return _ret;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

}
